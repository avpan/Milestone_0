from flask import Flask, render_template, request, redirect
from bokeh.plotting import figure
from bokeh.embed import components 
import requests
import pandas
import csv
import datetime
import numpy as py 

now = datetime.date.today()
app = Flask(__name__)
app.vars = {}

@app.route('/',methods=['GET','POST'])
def main():
  if request.method == 'GET':
  	return render_template('index.html')
  else:   	
  	return redirect('/plotfunction')
  	
@app.route('/plotfunc',methods=['POST'])
def plot():
	app.vars['ticker'] = request.form['ticker']
	api_key = 'i3eKhvJ-EcNW9SDcd5Kv'
	api_url = 'https://www.quandl.com/api/v3/datasets/WIKI/%s.csv?api_key=%s' % (app.vars['ticker'],api_key)
	session = requests.Session()
	session.mount('http://',requests.adapters.HTTPAdapter(max_retries = 3))
	raw_data = session.get(api_url)
	data = [row for row in raw_data]
	
	#write into csv file
	with open('data_%s.csv' % app.vars['ticker'], 'w') as f:
		for row in data:
			f.write(row)
	
	#Read into dataframe and lists
	wiki_data = pandas.read_csv('data_%s.csv' % app.vars['ticker'])
	dimensions = wiki_data.shape
	wiki_data['Date'] = pandas.to_datetime(wiki_data['Date'])
	dates = wiki_data['Date']
	date_month = dates.apply(lambda x: x.month)
	date_year = dates.apply(lambda x: x.year)
	features = request.form.getlist('features')
	for name in features:
		if name == 'Close':
			close_price = wiki_data[name]
		elif name == 'Adj. Close':
			adj_close_price = wiki_data[name]
		elif name == 'Open':
			open_price = wiki_data[name]
		else:
			adj_open_price = wiki_data[name]
		
	date,close,adj_close,openp,adj_open = [],[],[],[],[]
	final_data = []
	N = dimensions[0]
	#find current month
	month = now.month - 1 
	year = now.year
	for i in range(N):
		if date_month[i] == month and date_year[i] == year:
			date.append(dates[i])
			for name in features:
				if name == 'Close':
					close.append(close_price[i])
				elif name == 'Adj.Close':
					adj_close.append(adj_close_price[i])
				elif name == 'Open':
					openp.append(open_price[i])
				else:
					adj_open.append(adj_open_price[i])
		
	#plotting in bokeh
	TOOLS = "pan,wheel_zoom,box_zoom,reset,resize"
	plot = figure(tools=TOOLS, title = 
								'%s Data' % app.vars['ticker'], 
								x_axis_label = 'date', 
								x_axis_type='datetime')
	
	plot.line(date,close)
	script, div = components(plot)
	
	return render_template('graph.html',script=script,div=div, graph=app.vars['ticker'])
  	

if __name__ == '__main__':
  app.run(debug=True)
